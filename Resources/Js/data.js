let data  = [{
	"algorithm":"Bubble sort",
    "description":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeDescription":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeLine":[9,15,22,22],
    "cppCode":'<p><span class="red">#include</span> <span class="blue">&lt;iostream&gt;</span></p><p><span class="red">using namespace</span> std;</p><p>void</p><p>swap (int *xp, int *yp)</p><p>{</p><p>int temp = *xp;</p><p>*xp = *yp;</p><p>*yp = temp;</p><p>}</p><p></p><p>void</p><p>bubbleSort (int arr[], int n)</p><p>{</p><p>int i, j;</p><p>for (i = 0; i < n - 1; i++){</p><p>for (j = 0; j < n - i - 1; j++){</p><p>if (arr[j] > arr[j + 1]){</p><p>swap (&arr[j], &arr[j + 1]);</p><p>}</p><p>}</p><p>}</p><p>}</p>',
    "cCode":'
<code>#include <stdio.h> 
void
swap (int *xp, int *yp)
{
  int temp = *xp;
  *xp = *yp;
  *yp = temp;
}


void
bubbleSort (int arr[], int n)
{
  int i, j;
  for (i = 0; i < n - 1; i++){

    for (j = 0; j < n - i - 1; j++){
      if (arr[j] > arr[j + 1]){
      	swap (&arr[j], &arr[j + 1]);
      }
    }
  }
}</code>',
    "pythonCode":'<p ><span class="orange">def</span> bubbleSort(list):</p><p class="tab">swap = <span class="orange">False</span></p><p class="tab"><span class="orange">for</span> a <span class="orange">in</span> <span class="blue">range</span>(<span class="blue">len</span>(<span class="blue">list</span>) -1):</p><p class="tabb"><span class="ornge">if</span> <span class="blue">list</span>[a] > <span class="blue">list</span>[a+1]:</p><p class="tabbb">swap = <span class="orange">True</span></p><p class="tabbb"><span class="blue">list</span>[a], <span class="blue">list</span>[a+1] = <span class="blue">list</span>[a+1], <span class="blue">list</span>[a]</p><p class="tab"><span class="orange">if not </span> swap:</p><p class="tabb"><span class="ornge">return</span> <span class="blue">list</span></p><p class="tab"><span class="blue">return</span> bubbleSort(<span class="blue">list</span>)</p>',
    "javascriptCode":'<p><span class="blue">function</span> <span class="orange">bubbleSort</span>(<span class="red">list</span>) {</p><p class="tab">  <span class="blue">let</span> swap = <span class="blue">false</span>;</p><p class="tab">    <span class="red">for</span> (<span class="blue">let</span> i = 0; i <= list.length -1; i++) {</p><p class="tabb"><span class="blue">if</span> (list[i] > list[i+1]){</p><p class="tabbb">t = list[i];</p><p class="tabbb">list[i] = list[i+1];</p><p class="tabbb">list[i+1] = t;</p><p class="tabbb">swap = <span class="blue">true</span>;</p><p class="tabb">}</p><p class="tab">}</p><p class="tab"><span class="blue">if</span> (<span class="red">!</span>swap){</p><p class="tabb"><span class="red">return</span> list;</p><p class="tab">}</p><p class="tab"><span class="red">return</span> bubbleSort(list);</p><p>}</p>'
},
{
	"algorithm":"Insertion sort",
    "description":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeDescription":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeLine":[8,22,22,22],
    "cppCode":'',
    "cCode":'',
    "pythonCode":'<p><span class="orange">def</span> <span class="blue">insertionSort</span>(arr):</p><p class="tab"><span class="ornge">for</span> i <span class="ornge">in</spna> <span class="blue">range</span>(1, <span class="blue">len</span>(arr)):</p><p class="tabb">key = arr[i]</p><p class="tabb">j = i - 1</p><p class="tabb"><span class="ornge">while</span> j >= 0 <span class="ornge">and</span> key < arr[j]:</p<p class="tabbb">arr[j + 1] = arr[j]</p><p class="tabbb">j -= 1</p><p class="tabb">arr[j + 1] = key</p><p class="tab"><span class="ornge">return</span> arr</p>',
    "javascriptCode":'<p><spna class="blue">function</span> <span class="orange">insertionSort</span>(<span class="red">arr</spna>) {</p><p class="tab"><span class="blue">let</span> key, j;</p><p class="tab"><span class="blue">let</span> len = arr.length -1</p><p class="tab"><span class="red">for</spna> (<span class="blue">let</span> i = 1; i<= len; i++) {</p><p class="tabb">key = arr[i];</p><p class="tabb">j = i -1;</p><p class="tabb"><span class="blue">while</span>(j >= 0 <&& key < arr[j]){</p><p class="tabbb">arr[j + 1] = arr[j];</p><p class="tabbb">j = j - 1;</p><p class="tabb">}</p><p class="tabb">arr[j + 1] = key;</p><p class="tab">}</p><p class="tab"><span class="red">return</span> arr;</p><p>}</p>'
},
{
	"algorithm":"Selection sort",
    "description":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeDescription":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeLine":[22,22,22,22],
    "cppCode":"",
    "cCode":"",
    "pythonCode":'<p><span class="orange">def</span> <span class="blue">selectionSort</span>(A):</p><p class="tab"><span class="orange>for</span> i <span class="orange">in</span> <span class="blue">range</span>(<span class="blue">len</span>(A)):</p><p class="tabb">min_idx = i</p><p class="tabb"><span class="orange">for</span> j <span class="orange">in</span> <span class="blue">range</span>(i + 1, <span class="blue">len</span>(A)):</p><p class="tabbb"><span class="orange">if</span> A[min_idx] > A[j]:</p><p class="tabbbb">min_idx = j</p><p class="tabb">A[i], A[min_idx] = A[min_idx], A[i]</p><p><span class="orange">return</spna> A</p>',
    "javascriptCode":'<p><span class="blue">function</span><span class="red"> selectionSort<span>/(<span class="red">arr</span>) {</p><p class="tab"><span class="blue">let</span> min;</p><p class="tab"><span class="red">for</span>(<span class="blue">let</span> i = 0; i < arr.length; i++){</p><p class="tabb">min = i;</p><p class="tabb"><span class="red">for</span>(<span class="red">let</span> j = i + 1; j < arr.length; j++){</p><p class="tabbb"><span class="blue">if</span> (arr[min] > arr[j]) {</p><p class="tabbbb">min = j;</p><p class="tabbb">}</p><p class="tabb">}</p><p class="tabb">temp = arr[i];</p><p class="tabb">arr[i] = arr[min];</p><p class="tabb">arr[min] = temp;</p><p class="tab">}</p><p class="tab"><span class="red">return</spna> arr;</p><p>}</p>'
}, 
{
	"algorithm":"Counting sort",
    "description":"Counting sort er integer röðunar Algrím. í versta falli er hann o(n + k). Counting sort raðar upp tölunum frá minnstu tölunni  í stærstu sem er í listanum. Hann getur ekki raðað tölum sem eru minn en 0. Algrímið var fundið upp árið 1954 af Harold H. Seward.",
    "codeDescription":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeLine":[13,20,39,39],
    "cppCode":'<p><span class="red">#include</span> <span class="blue">&lt;iostream&gt;</span></p><p><span class="red">using namespace</span> std;</p><p>int max(int arr[], int n){</p><p class="tab">int high;</p><p class="tab"><span class="red">for</span> (int i <span class="red">=</span> 0 ; i <span class="red"><</span> n ; i<span class="red">++</span>){</p><p class="tabb"><span class="red">if</span> (arr[i] <span class="red">></span> high)</p><p class="tabbb">high <span class="red">=</span> arr[i];</p><p class="tabb">}</p><p class="tab"><span class="red">return</span> high;</p><p>}</p><p>void countingSort(int <span class="red">*</span>arr, int n){</p><p class="tab">int maxNub <span class="red">=</span> max(arr, n);</p><p class="tab">int count[maxNub];</p><p class="tab"><span class="red">for</span>(int i; i <span class="red"><</span> maxNub;i<span class="red">++</span>){count[i] <span class="red">=</span> 0;}</p><p class="tab">int sort[n];</p><p class="tab"><span class="red">for</span>(int i; i <span class="red"><</span> n;i<span class="red">++</span>){sort[i] <span class="red">=</span> 0;}</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i < n; i<span class="red">++</span>){</p><p class="tabb">count[(arr[i])<span class-"red">=</span>1] <span class="red">+=</span> 1;</p><p class="tab">}</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i < maxNub<span class="red">-</span>1; i<span class="red">++</span>){</p><p class="tabb">count[i<span class="red">+</span>1] <span class="red">+=</span> count[i];</p><p class="tab">}</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i <span class="red"><</span> n; i<span class="red">++</span>){</p><p class="tabb">sort[count[arr[i]<span class="red">-</span>1]<span class="red">-</span>1] <span class="red">=</span> arr[i];</p><p class="tabb">count[arr[i]<span class="red">-</span>1] <span class="red">-=</span> 1;</p><p class="tab">}</p><p class="tab">for(int i <span class="red">=</span> 0; i <span class="red"><</span> n; i<span class="red">++</span>){</p><p class="tabb">arr[i] <span class="red">=</span> sort[i];</p><p class="tab">}</p><p>}<p><p>int main(){</p><p class="tab">cout <span class="red"><<</span> "";</p><p class="tab">int arr[5] <span class="red">=</span> { 12, 34, 54, 2, 3};</p><p class="tab">countingSort(arr, 5);</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i < 5; i<span class="red">++</span>){</p><p class="tabb">cout <span class="red"><<</span> arr[i] <span class="red"><<</span> <span class="yellow">" "</span>;</p><p class="tab">}</p><p class="tab"><span class="red">return</span> 0;</p><p>}</p>',
    "cCode":'<p><span class="red">#include</span> <span class="blue">&lt;iostream&gt;</span></p><p><span class="red">using namespace</span> std;</p><p>int max(int arr[], int n){</p><p class="tab">int high;</p><p class="tab"><span class="red">for</span> (int i <span class="red">=</span> 0 ; i <span class="red"><</span> n ; i<span class="red">++</span>){</p><p class="tabb"><span class="red">if</span> (arr[i] <span class="red">></span> high)</p><p class="tabbb">high <span class="red">=</span> arr[i];</p><p class="tabb">}</p><p class="tab"><span class="red">return</span> high;</p><p>}</p><p>void countingSort(int <span class="red">*</span>arr, int n){</p><p class="tab">int maxNub <span class="red">=</span> max(arr, n);</p><p class="tab">int count[maxNub];</p><p class="tab"><span class="red">for</span>(int i; i <span class="red"><</span> maxNub;i<span class="red">++</span>){count[i] <span class="red">=</span> 0;}</p><p class="tab">int sort[n];</p><p class="tab"><span class="red">for</span>(int i; i <span class="red"><</span> n;i<span class="red">++</span>){sort[i] <span class="red">=</span> 0;}</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i < n; i<span class="red">++</span>){</p><p class="tabb">count[(arr[i])<span class-"red">=</span>1] <span class="red">+=</span> 1;</p><p class="tab">}</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i < maxNub<span class="red">-</span>1; i<span class="red">++</span>){</p><p class="tabb">count[i<span class="red">+</span>1] <span class="red">+=</span> count[i];</p><p class="tab">}</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i <span class="red"><</span> n; i<span class="red">++</span>){</p><p class="tabb">sort[count[arr[i]<span class="red">-</span>1]<span class="red">-</span>1] <span class="red">=</span> arr[i];</p><p class="tabb">count[arr[i]<span class="red">-</span>1] <span class="red">-=</span> 1;</p><p class="tab">}</p><p class="tab">for(int i <span class="red">=</span> 0; i <span class="red"><</span> n; i<span class="red">++</span>){</p><p class="tabb">arr[i] <span class="red">=</span> sort[i];</p><p class="tab">}</p><p>}<p><p>int main(){</p><p class="tab"><span class="red">printf</span>(<span class="yellow">""</span>);</p><p class="tab">int arr[5] <span class="red">=</span> { 12, 34, 54, 2, 3};</p><p class="tab">countingSort(arr, 5);</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i < 5; i<span class="red">++</span>){</p><p class="tabb"><span class="red">printf</span>(<span class="yellow">"</span><span class="blue">%d</span> <span class="yellow">"</span>, arr[i]);</p><p class="tab">}</p><p class="tab"><span class="red">return</span> 0;</p><p>}</p>',
    "pythonCode":'<p><span class="orange">def</span> <span class="blue">countingSort</span>(arr):</p><p class="tab">sort = [0]*<span class="blue">len</span>(arr)</p><p class="tab">count = [0]*<span class="blue">max</span>(arr)</p><p class="tab"><span class="orange">for</span> i in <span class="blue">range</span>(<span class="blue">len</span>(arr)):</p><p class="tabb">count[(arr[i])-1] += 1</p><p class="tab"><span class="orange">for</span> i in <span class="blue">range</span>(<span class="blue">len</span>(count)-1):</p><p class="tabb">count[i+1] += count[i]</p><p class="tab"><span class="orange">for</span> i in <span class="blue">range</span>(<span class="blue">len</span>(arr)):</p><p class="tabb">sort[count[arr[i]-1]-1] = arr[i]</p><p class="tabb">count[arr[i]-1] -= 1</p><p class="tab"><span class="orange">return</span> sort</p><p>listi = [ 12, 34, 54, 2, 3]</p><p><span class="blue">print</span>(countingSort(listi))</p>',
    "javascriptCode":'<p><span class="blue">function</span> <span class="yellow">countingSort</span>(<span class="orange"> arr</span>){</p><p class="tab">(sort <span class="red">=</span> []).length <span class="red">=</span> arr.length;</p><p class="tab">sort.<span class="blue">fill</span>(<span class="blue">0</span>);</p><p class="tab">(count <span class="red">=</span> []).length <span class="red">=</span> <span class="blue">Math</span>.<span class="blue">max</span>(<span class="red">...</span>arr);</p><p class="tab">count.<span class="blue">fill</span>(<span class="blue">0</span>);</p><p class="tab"><span class="red">for</span>(<span class="blue">let</span> i <span class="red">=</span> 0; i < arr.length; i<span class="red">++</span>){</p><p class="tabb">count[(arr[i])-1] <span class="red">+=</span> 1;</p><p class="tab">}</p><p class="tab"><span class="red">for</span>(let i <span class="red">=</span> 0; i < count.length<span class="red">-</span>1; i<span class="red">++</span>){</p><p class="tabb">count[i<span class="red">+</span>1] <span class="red">+=</span> count[i];</p><p class="tab">}</p><p class="tab"><span class="red">for</span>(<span class="blue">let</span> i <span class="red">=</span> 0; i < arr.length; i<span class="red">++</span>){</p><p class="tabb">sort[count[arr[i]<span class="red">-</span>1]<span class="red">-</span>1] <span class="red">=</span> arr[i];</p><p class="tabb">count[arr[i]<span class="red">-</span>1] <span class="red">-=</span> 1;</p><p class="tab">}</p><p class="tab"><span class="red">return</span> sort;</p><p>}</p><p>let arr = [12, 34, 54, 2, 3];</p><p>arr = countingSort(arr);</p><p>console.log(arr);</p>'
}, 
{
	"algorithm":"Shell sort",
    "description":"Shell sort, er comparison sort algrím. Er öðruvísi útgáfa af insertion sort. Munurinn er sú að þegar insertion sort er notað og lægsta talan er út í hinum enda þá mun tala þurfa að fara í öll indexin í listanum. En með shell sort myndi talan fyrst færast í miðjuna - 1  og svo í fyrsta stakið. Tíminn fyrir shell sort er O(n2). Shell sort var fyst gefið út árið 1959 af Donald Shell.",
    "codeDescription":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeLine":[14,18,25,25],
    "cCode":'<p>void shellSort(int arr[], int n)</p><p>{</p><p class="tab">int gap = n/2;</p><p class="tab"><span class="red">while</span>(gap <span class="red">></span> 0){</p><p class="tabb"><span class="red">for</span>(int ii <span class="red">=</span> gap; ii <span class="red"><</span> n; ii<span class="red">++</span>){</p><p class="tabbb">int temp <span class="red">=</span> arr[ii];</p><p class="tabbb">int j <span class="red">=</span> ii;</p><p class="tabbb"><span class="blue">while</span>(j <span class="red">>=</span> gap <span class="blue">&&</span> arr[j <span class="red">-</span>gap] <span class="red">></span> temp){</p><p class="tabbbb">arr[j] <span class="red">=</span> arr[j<span class="red">-</span>gap];</p><p class="tabbbb">j <span class="red">-=</span> gap;</p><p class="tabbb">}</p><p class="tabbb">arr[j] <span class="red">=</span> temp;</p><p class="tabb">}</p><p class="tabb">gap <span class="red">=</span> gap<span class="red">/</span>2;</p><p class="tab">}</p><p>}</p><p>int main()</p><p>{</p><p class="tab">int arr[5] = { 12, 34, 54, 2, 3};</p><p class="tab">shellSort(arr, 5);</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i <span class="red"><</span> 5; i<span class="red">++</span>){</p><p class="tabb">printf(<span class="yellow">"</span><span class="blue">%</span>d <span class="yellow">"</span>, arr[i]);</p><p class="tab">}</p><p class="tab"><span class="red">return</span> 0;</p><p>}</p>',
    "cppCode":'<p>void shellSort(int arr[], int n)</p><p>{</p><p class="tab">int gap = n/2;</p><p class="tab"><span class="red">while</span>(gap <span class="red">></span> 0){</p><p class="tabb"><span class="red">for</span>(int ii <span class="red">=</span> gap; ii <span class="red"><</span> n; ii<span class="red">++</span>){</p><p class="tabbb">int temp <span class="red">=</span> arr[ii];</p><p class="tabbb">int j <span class="red">=</span> ii;</p><p class="tabbb"><span class="blue">while</span>(j <span class="red">>=</span> gap <span class="blue">&&</span> arr[j <span class="red">-</span>gap] <span class="red">></span> temp){</p><p class="tabbbb">arr[j] <span class="red">=</span> arr[j<span class="red">-</span>gap];</p><p class="tabbbb">j <span class="red">-=</span> gap;</p><p class="tabbb">}</p><p class="tabbb">arr[j] <span class="red">=</span> temp;</p><p class="tabb">}</p><p class="tabb">gap <span class="red">=</span> gap<span class="red">/</span>2;</p><p class="tab">}</p><p>}</p><p>int main()</p><p>{</p><p class="tab">int arr[5] = { 12, 34, 54, 2, 3};</p><p class="tab">shellSort(arr, 5);</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i <span class="red"><</span> 5; i<span class="red">++</span>){</p><p class="tabb">cout <span class="red"><<</span> arr[i] <span class="red"><<</span> <span class="yellow">" "</span>;</p><p class="tab">}</p><p class="tab"><span class="red">return</span> 0;</p><p>}</p>',
    "pythonCode":'<p><span class="orange">def</span> <span class="blue">shellSort</span>(arr):</p><p class="tab"> n = <span class="blue">len</span>(arr)</p><p class="tab">gap = n//2</p><p class="tab"><span class="orange">while</span> gap > 0:</p><p class="tabb"><span class="orange">for</span> i <span class="orange">in</span> <span class="blue">range</span>(gap, n):</p><p class="tabbb">  temp = arr[i]</p><p class="tabbb">j = i</p><p class="tabbb"><span class="orange">while</span>  j >= gap <span class="orange">and</span> arr[j-gap] >temp:</p><p class="tabbbb">arr[j] = arr[j-gap]</p><p  class="tabbbb">j -= gap</p><p  class="tabbb">arr[j] = temp</p> <p class="tabb">gap //= 2</p><p>arr = [ 12, 34, 54, 2, 3]</p><p>shellSort(arr)</p>',
    "javascriptCode":'<p><span class="blue">function</span> <span class="blue">shellSort</span>(arr){</p><p class="tab"><span class="blue">let</span> n = arr.<span class="blue">length</span>;</p><p class="tab"><span class="blue">let</span> gap = Math.<span class="blue">floor</span>(n /2);</p><p class="tab"><span class="blue">while</span>(gap > 0){</p><p class="tabb"><span class="blue">for</span>(<span class="blue">let</span> i = gap;i < n; i++){</p><p class="tabbb"><span class="blue">let</span> temp = arr[i];</p><p class="tabbb"><span class="blue">let</span> j = i;</p><p class="tabbb"><span class="blue">while</span>(j >= gap & arr[j-gap] > temp){</p><p class="tabbbb">arr[j] = arr[j-gap];</p><p class="tabbbb">j -= gap;</p><p class="tabbb">}</p><p class="tabbb">arr[j] = temp;</p><p class="tabb">}</p><p class="tabb">gap = Math.<span class="blue">floor</span>(gap/2);</p><p class="tab">}</p><p>}</p><p><span class="blue">let</span> arr = [12, 34, 54, 2, 3];</p><p>shellSort(arr);</p>'
},
{
	"algorithm":"Quick sort",
	"description":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeDescription":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
	"codeLine":[22,22,22,22],
    "cppCode":"",
	"cCode":"",
	"pythonCode":'<p><span class="orange">def</span> <span class="blue">partition</span>(arr, low, high):</p><p class="tab">i = (low - 1)</p><p class="tab">pivot = arr[high]</p><p class="tab"><span class="orange">for</span> j <span class="orange">in</span> <span class="blue">range</span>(low, high):</p><p class="tabb"><span class="orange">if</span> arr[j] <= pivot:</p><p class="tabbb">i = i + 1</p><p class="tabbbb">arr[i], arr[j] = arr[j], arr[i]</p><p class="tab">arr[i + 1], arr[high] = arr[high], arr[i + 1]</p><p class="tab"><span class="orange">return</span> i + 1</p><p><span class="orange">def</span> <span class="blue">quickSort</span>(arr, low, high):</p><p class="tab"><span class="orange">if</span> low < high:</p><p class="tabb">pi = partition(arr, low, high)</p><p class="tabb">quickSort(arr, low, pi - 1)</p><p class="tabb">quickSort(arr, pi + 1, high)</p>',
	"javascriptCode":'<p><span class="blue">function</span> <span class="red">partition</span>(<span class="red">arr</span>, <span class="red">low</span>, <span class="red">high</span>) {</p><p class="tab"><span class="blue">let</span> temp;</p><p class="tab">i = (low - 1);</p><p class="tab">pivot = arr[high]</p><p class="tab"><span class="red">for</span>(<span class="blue">let</span> j = low; j < high; j++){</p><p class="tabb"><span class="blue">if</span> (arr[j] <= pivot) {</p><p class="tabbb">i = i + 1;</p><p class="tabbb">temp = arr[i];</p><p class="tabbb">arr[i] = arr[j];</p><p class="tabbb">arr[j] = temp;</p><p class="tabb">}</p><p class="tab">}</p><p class="tab">temp = arr[i + 1];</p><p class="tab">arr[i + 1] = arr[high];</p><p class="tab">arr[high] = temp;</p><p class="tab"><span class="red">return</span> i + 1</p><p>}</p><p><span class="blue">function</span> <span class="red">quickSort</span>(arr, low=0, high=null) {</p><p class="tab"><span class="red">if</span> (high == <span class="blue">null</span>) {</p><p  class="tabb">high = arr.length -1;</p><p  class="tab">}</p><p class="tab"><span class="blue">if</span> (low < high) {</p><p class="tabb">pi = partition(arr, low, high);</p><p class="tabb">quickSort(arr, low, pi - 1);</p><p class="tabb">quickSort(arr, pi + 1, high);</p><p class="tab">}</p><p>}</p>'
},
{
	"algorithm":"Heap sort",
    "description":"Heap sorter comparison röðunar algrím, byggt á Binary Heap data structure. Hepsort byrjarað finna hæstu töluna og færa hann frem, þegar fremst tala er sú hæsta færir hana aftast og þá er hún röðuð. Tíminn á heap sort o(nLogn). Heap sort var fundið af J. W. J. Williams árið 1964.",
    "codeDescription":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeLine":[24,31,40,40],
    "cppCode":'<p><span class="yellow">void</span> heapify(int arr[], int n, int i)</p><p>{</p><p class="tab">int largest = i;</p><p class="tab">int l <span class="red">=</span> 2 <span class="red">*</span> i <span class="red">+</span> 1;</p><p class="tab">int r <span class="red">=</span> 2 <span class="red">*</span> i <span class="red">+</span> 2;</p><p class="tab"><span class="red">if</span>(l <span class="red"><</span> n & arr[i] <span class="red"><</span> arr[l]){</p><p class="tabb">largest <span class="red">=</span> l;</p><p class="tab">}</p><p class="tab"><span class="red">if</span>(r <span class="red"><</span> n & arr[largest] <span class="red"><</span> arr[r]){</p><p class="tabb">largest <span class="red">=</span> r;</p><p class="tab">}</p><p class="tab"><span class="red">if</span>(largest != i){</p><p class="tabb">int temp <span class="red">=</span> arr[i];</p><p class="tabb">arr[i] <span class="red">=</span> arr[largest];</p><p class="tabb">arr[largest] <span class="red">=</span> temp;</p><p class="tabb">heapify(arr, n, largest);</p><p class="tab">}</p><p>}</p><p><span class="yellow">void</span> heapSort(int arr[], int n)</p><p>{</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> n; i <span class="red">></span> <span class="red">-</span>1; i<span class="red">--</span>){</p><p class="tabb">heapify(arr, n, i);</p><p class="tab">}</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> n<span class="red">-</span>1; i <span class="red">></span> 0; i<span class="red">--</span>){</p><p class="tabb">int temp <span class="red">=</span> arr[i];</p><p class="tabb">arr[i] <span class="red">=</span> arr[0];</p><p class="tabb">arr[0] <span class="red">=</span> temp;</p><p class="tabb">heapify(arr, i, 0);</p><p class="tab">}</p><p>}</p><p>int main()</p><p>{</p><p class="tab">cout <span class="red"><<</span> <span class="yellow">""</span>;</p><p class="tab">int arr[5] = { 12, 34, 54, 2, 3};</p><p class="tab">heapSort(arr, 5);</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i <span class="red"><</span> 5; i<span class="red">++</span>){</p><p class="tabb">cout <span class="red"><<</span> arr[i] <span class="red"><<</span> <span class="yellow">" "</span>;</p><p class="tab">}</p><p class="tab"><span class="red">return</span> 0;</p><p>}</p>',
    "cCode":'<p><span class="yellow">void</span> heapify(int arr[], int n, int i)</p><p>{</p><p class="tab">int largest = i;</p><p class="tab">int l <span class="red">=</span> 2 <span class="red">*</span> i <span class="red">+</span> 1;</p><p class="tab">int r <span class="red">=</span> 2 <span class="red">*</span> i <span class="red">+</span> 2;</p><p class="tab"><span class="red">if</span>(l <span class="red"><</span> n & arr[i] <span class="red"><</span> arr[l]){</p><p class="tabb">largest <span class="red">=</span> l;</p><p class="tab">}</p><p class="tab"><span class="red">if</span>(r <span class="red"><</span> n & arr[largest] <span class="red"><</span> arr[r]){</p><p class="tabb">largest <span class="red">=</span> r;</p><p class="tab">}</p><p class="tab"><span class="red">if</span>(largest != i){</p><p class="tabb">int temp <span class="red">=</span> arr[i];</p><p class="tabb">arr[i] <span class="red">=</span> arr[largest];</p><p class="tabb">arr[largest] <span class="red">=</span> temp;</p><p class="tabb">heapify(arr, n, largest);</p><p class="tab">}</p><p>}</p><p><span class="yellow">void</span> heapSort(int arr[], int n)</p><p>{</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> n; i <span class="red">></span> <span class="red">-</span>1; i<span class="red">--</span>){</p><p class="tabb">heapify(arr, n, i);</p><p class="tab">}</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> n<span class="red">-</span>1; i <span class="red">></span> 0; i<span class="red">--</span>){</p><p class="tabb">int temp <span class="red">=</span> arr[i];</p><p class="tabb">arr[i] <span class="red">=</span> arr[0];</p><p class="tabb">arr[0] <span class="red">=</span> temp;</p><p class="tabb">heapify(arr, i, 0);</p><p class="tab">}</p><p>}</p><p>int main()</p><p>{</p><p class="tab">printf(<span class="red">""</span>);</p><p class="tab">int arr[5] = { 12, 34, 54, 2, 3};</p><p class="tab">heapSort(arr, 5);</p><p class="tab"><span class="red">for</span>(int i <span class="red">=</span> 0; i <span class="red"><</span> 5; i<span class="red">++</span>){</p><p class="tabb">printf(<span class="yellow">"</span><span class="blue">%d</span><span class="yellow">"</span>, arr[i]);</p><p class="tab">}</p><p class="tab"><span class="red">return</span> 0;</p><p>}</p>',
    "pythonCode":'<p><span class="orange">def</span> <span class="blue">heapify</span>(arr, n, i):</p><p class="tab">largest = i</p><p class="tab">l = 2 * i + 1</p><p class="tab">r = 2 * i + 2</p><p class="tab"><span class="orange">if</span> l < n <span class="orange">and</span> arr[i] < arr[l]:</p><p class="tabb">largest = l</p><p class="tab"><span class="orange">if</span> r < n <span class="orange">and</span> arr[largest] < arr[r]:</p><p class="tabb">largest = r</p><p class="tab"><span class="orange">if</span> largest != i:</p><p class="tabb">temp = arr[i]</p><p class="tabb">arr[i] = arr[largest]</p><p class="tabb">arr[largest] = temp</p><p class="tabb">heapify(arr, n, largest)</p><p><span class="orange">def</span> <span class="blue">heapSort</span>(arr):</p><p class="tab">n = len(arr)</p><p class="tab"><span class="orange">for</span> i <span class="orange">in</span> range(n, -1, -1):</p><p class="tabb">heapify(arr, n, i)</p><p class="tab"><span class="orange">for</span> i <span class="orange">in</span> range(n-1, 0, -1):</p><p class="tabb">temp = arr[i]</p><p class="tabb">arr[i] = arr[0]</p><p class="tabb">arr[0] = temp</p><p class="tabb">heapify(arr, i, 0)</p><p>arr = [ 12, 11, 13, 5, 6, 7]</p> <p>heapSort(arr)</p>',
    "javascriptCode":'<p><span class="blue">function</span> <span class="blue">heapify</span>(arr, n, i){</p><p class="tab"><span class="blue">let</span> largest = i</p><p class="tab"><span class="blue">let</span> l = 2 * i + 1</p><p class="tab"><span class="blue">let</span> r = 2 * i + 2</p><p class="tab"><span class="blue">if</span>(l < n & arr[i] < arr[l]){</p> <p class="tabb">largest = l</p><p class="tab">}</p><p class="tab"><span class="blue">if</span>(r < n & arr[largest] < arr[r]){</p> <p class="tabb">largest = r</p><p class="tab">}</p><p class="tab"><span class="blue">if</span>(largest != i){</p><p class="tabb">temp = arr[i]</p><p class="tabb">arr[i] = arr[largest]</p><p class="tabb">arr[largest] = temp</p><p class="tabb">heapify(arr, n, largest)</p><p class="tab">}</p><p>}</p><p><span class="blue">function</span> <span class="blue">heapSort</span>(arr){</p><p class="tab">n = arr.<span class="blue">length</span>;</p><p class="tab"><span class="blue">for</span>(i = n; i > -1; i--){</p><p class="tabb">heapify(arr, n, i)</p><p class="tab">}</p><p class="tab"><span class="blue">for</span>(i = n-1; i > 0; i--){</p><p class="tabb">temp = arr[i]</p><p class="tabb">arr[i] = arr[0]</p><p class="tabb">arr[0] = temp</p><p class="tabb">heapify(arr, i, 0)</p><p class="tab">}</p><p>}</p><p>arr = [ 12, 11, 13, 5, 6, 7]</p><p>heapSort(arr)</p>'
},
{
	"algorithm":"Merge sort",
    "description":"Merge Sort er  Divide and Conquer algrím. Algrímið skiptir listanum í 2 þangað til að listinn er með 1 index þá ber hann listana samann og raðar þeim rétt. Tíma á Merge sort er o(n log(n)). Var fundið árið 1948 af von Neumann.",
    "codeDescription":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "codeLine":[26,35,22,22],
    "cppCode":'',
    "cCode":'',
    "pythonCode":'<p><span class="orange">def</span> <span class="blue">mergeSort</span>(arr):</p><p class="tab"><span class="orange">if</span> <span class="blue">len</span>(arr) >1:</p><p class="tabb">mid = <span class="blue">len</span>(arr)//2</p><p class="tabb">L = arr[:mid]</p><p class="tabb">R = arr[mid:]</p><p class="tabb">mergeSort(L)</p><p class="tabb">mergeSort(R)</p><p class="tabb">i = j = k = 0</p><p class="tabb"><span class="orange">while</span> i < <span class="blue">len</span>(L) and j < <span class="blue">len</span>(R):</p><p class="tabbb"><span class="orange">if</span> L[i] < R[j]:</p><p class="tabbbb">arr[k] = L[i]</p><p class="tabbbb">i+=1</p><p class="tabbb"><span class="orange">else</span>:</p><p class="tabbbb">arr[k] = R[j]</p><p class="tabbbb">j+=1</p><p class="tabbb">k+=1</p><p class="tabb"><span class="orange">while</span> i < <span class="blue">len</span>(L):</p><p class="tabbb">arr[k] = L[i]</p><p class="tabbb">i+=1</p><p class="tabbb">k+=1</p><p class="tabb"><span class="orange">while</span> j < <span class="blue">len</span>(R):</p><p class="tabbb">arr[k] = R[j]</p><p class="tabbb">j+=1</p><p class="tabbb">k+=1</p><p>arr = [12, 11, 13, 5, 6, 7]</p><p>mergeSort(arr)</p>',
    "javascriptCode":'<p ><span class="blue">function mergeSort</span>(arr) {</p><p class="tab"><span class="blue">let</span> n = arr.<span class="blue">length</span>;</p><p class="tab">if(n > 1){</p><p class="tabb"><span class="blue">let</span> mid = Math.<span class="blue">floor</span>(n/2);</p><p class="tabb"><span class="blue">let</span> l = arr.<span class="blue">slice</span>(0, mid);</p><p class="tabb"><span class="blue">let</span> r = arr.<span class="blue">slice</span>(mid, n);</p><p class="tabb">mergeSort(l);</p><p class="tabb">mergeSort(r);</p><p class="tabb"><span class="blue">let</span> i = 0;</p><p class="tabb"><span class="blue">let</span> j = 0;</p><p class="tabb"><span class="blue">let</span> k = 0;</p><p class="tabb"><span class="blue">while</span>(i < l.<span class="blue">length</span> & j < r.<span class="blue">length</span>){</p><p class="tabbb"><span class="blue">if</span>(l[i] < r[j]){</p><p class="tabbbb">arr[k] = l[i];</p><p class="tabbbb">i+=1</p><p class="tabbb">}<span class="blue">else</span>{</p><p class="tabbbb">arr[k] = r[j];</p><p class="tabbbb">j+=1</p><p class="tabbb">}</p><p class="tabbb">k+=1</p><p class="tabb">}</p><p class="tabb"><span class="blue">while</span>(i < l.<span class="blue">length</span>){</p><p class="tabbb">arr[k] = l[i];</p><p class="tabbb">i+=1</p><p class="tabbb">k+=1</p><p class="tabb">}</p><p class="tabb"><span class="blue">while</span>(j < r.<span class="blue">length</span>){</p><p class="tabbb">arr[k] = r[j];</p><p class="tabbb">j+=1</p><p class="tabbb">k+=1</p><p class="tabb">}</p><p class="tab">}</p><p >}</p><p >arr = [12, 11, 13, 5, 6, 7]</p><p >mergeSort(arr);</p>'
}
];
